import emailjs from "@emailjs/browser";

const required = (v: string | undefined, k: string) => {
  if (!v) throw new Error(`Missing env ${k}`);
  return v;
};

export const EMAILJS_CONFIG = {
  SERVICE_ID: required(
    import.meta.env.VITE_EMAILJS_SERVICE_ID,
    "VITE_EMAILJS_SERVICE_ID"
  ),
  TEMPLATE_ID: required(
    import.meta.env.VITE_EMAILJS_TEMPLATE_ID,
    "VITE_EMAILJS_TEMPLATE_ID"
  ),
  PUBLIC_KEY: required(
    import.meta.env.VITE_EMAILJS_PUBLIC_KEY,
    "VITE_EMAILJS_PUBLIC_KEY"
  ),
} as const;

// Initialize EmailJS
emailjs.init(EMAILJS_CONFIG.PUBLIC_KEY);

export interface BookingData {
  name: string;
  phone: string;
  date: string; // c√≥ th·ªÉ l√† "2025-09-15" (input type=date) ho·∫∑c d·∫°ng kh√°c
  time: string;
  message: string;
}

/** Chu·∫©n ho√° ng√†y v·ªÅ dd-MM-yyyy (an to√†n cho nhi·ªÅu input kh√°c nhau) */
const formatDateVN = (input: string): string => {
  if (!input) return "";
  // ISO yyyy-mm-dd (t·ª´ <input type="date">)
  const iso = input.match(/^(\d{4})-(\d{2})-(\d{2})$/);
  if (iso) {
    const [, y, m, d] = iso;
    return `${d}-${m}-${y}`;
  }
  // dd/mm/yyyy ho·∫∑c dd-mm-yyyy -> chuy·ªÉn sang dd-MM-yyyy
  const dmy = input.match(/^(\d{2})[\/-](\d{2})[\/-](\d{4})$/);
  if (dmy) {
    const [, d, m, y] = dmy;
    return `${d}-${m}-${y}`;
  }
  // Fallback: ƒë·ªÉ JS parse r·ªìi format theo local
  const d = new Date(input);
  if (!isNaN(d.getTime())) {
    const dd = String(d.getDate()).padStart(2, "0");
    const mm = String(d.getMonth() + 1).padStart(2, "0");
    const yyyy = d.getFullYear();
    return `${dd}-${mm}-${yyyy}`;
  }
  // Kh√¥ng parse ƒë∆∞·ª£c th√¨ tr·∫£ nguy√™n b·∫£n
  return input;
};

export const sendBookingNotification = async (bookingData: BookingData) => {
  try {
    const booking_date_vn = formatDateVN(bookingData.date);
    const nowVN = new Date().toLocaleString("vi-VN");

    const templateParams = {
      to_name: "B√°c sƒ© ph√≤ng kh√°m m·∫Øt",
      to_email: "kh√°ch h√†ng",
      from_name: "H·ªá th·ªëng ƒë·∫∑t l·ªãch ph√≤ng kh√°m",

      // Th√¥ng tin kh√°ch h√†ng ƒë·∫∑t l·ªãch
      customer_name: bookingData.name,
      customer_phone: bookingData.phone,
      booking_date_vn, // <<< d√πng bi·∫øn ƒë√£ format dd-MM-yyyy
      booking_time: bookingData.time,
      customer_message: bookingData.message || "Kh√¥ng c√≥ ghi ch√∫",
      booking_datetime: nowVN,

      notification_subject: `üîî L·ªãch h·∫πn m·ªõi t·ª´ ${bookingData.name}`,
      formatted_message: `
        Kh√°ch h√†ng: ${bookingData.name}
        S·ªë ƒëi·ªán tho·∫°i: ${bookingData.phone}
        Ng√†y kh√°m: ${booking_date_vn}
        Gi·ªù kh√°m: ${bookingData.time}
        Ghi ch√∫: ${bookingData.message || "Kh√¥ng c√≥"}
        Th·ªùi gian ƒë·∫∑t: ${nowVN}
      `.trim(),

      // T√πy ch·ªçn: gi·ªØ th√™m booking_date c≈© nh∆∞ng ƒë√£ format (ph√≤ng khi template c≈© c√≤n d√πng)
      booking_date: booking_date_vn,
    };

    const response = await emailjs.send(
      EMAILJS_CONFIG.SERVICE_ID,
      EMAILJS_CONFIG.TEMPLATE_ID,
      templateParams
    );

    console.log(
      "Email notification sent to clinic owner successfully:",
      response
    );
    return { success: true, response };
  } catch (error) {
    console.error("Failed to send booking notification:", error);
    return { success: false, error };
  }
};
